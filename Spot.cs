using Discord.WebSocket;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Discord.Interactions;
using Obscure;
using AutoGen;
using AutoGen.Core;
using AutoGen.OpenAI;
using Microsoft.SemanticKernel.Agents;

namespace Obscura
{
    public class Spot : InteractionModuleBase<SocketInteractionContext>
    {
        string openaiapitoken;
        public static MiddlewareAgent<AssistantAgent> assistantAgent;
        public static MiddlewareAgent<UserProxyAgent> userProxyAgent;
        public InteractionService commands { get; set; }
        private static DiscordSocketClient _client;
        public Spot(DiscordSocketClient client)
        {
            _client = client;

        }

        [SlashCommand("startspot", "starts spots backend")]
        [RequireUserPermission(Discord.GuildPermission.Administrator)]
        public async Task startSpot()
        {
            openaiapitoken = File.ReadAllText("c:/openai.txt");
            var gpt35Config = new OpenAIConfig(openaiapitoken, "gpt-3.5-turbo");

            assistantAgent = new AssistantAgent(
                name: "Spot",
                systemMessage: "You are an assistant named spot that helps user to do some tasks. The user's message will be formatted like this: \"{username}: {message}\"",
                llmConfig: new ConversableAgentConfig
                {
                    Temperature = 0.7f,
                    ConfigList = [gpt35Config],
                }).RegisterPrintMessage();

            userProxyAgent = new UserProxyAgent(
                name: "user",
                humanInputMode: HumanInputMode.ALWAYS)
                .RegisterPrintMessage();

            await RespondAsync("Spot Online", ephemeral: true);
        }

        [SlashCommand("resetspot", "resets spots memory")]
        [RequireUserPermission(Discord.GuildPermission.Administrator)]
        public async Task resetSpot()
        {
            await RespondAsync("Spot got dementia again");
        }

        public static void Trigger(SocketMessage msg)
        {
            ProcessRequest(msg);
        }

        private static async Task ProcessRequest(SocketMessage msg)
        {
            if (msg.Content.StartsWith("-")) return;
            var type = msg.Channel.EnterTypingState();
            var userinput = $"{msg.Author.Username}: {msg.Content}";
            var response = await assistantAgent.SendAsync(userinput);
            string rmsg = response.GetContent();
            if (rmsg == null) return;
            type.Dispose();
            await msg.Channel.SendMessageAsync($"{rmsg}\n-# The content of this message is generated by an AI large language model, this content does not reflect the views or beliefs of those involved in this bot's development");
            return;
        }


    }
}
